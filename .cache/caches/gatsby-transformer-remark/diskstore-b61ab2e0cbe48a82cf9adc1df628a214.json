{"expireTime":9007200884409724000,"key":"transformer-remark-markdown-html-1e9a81e3d3d8569cce8021d161e66c91--","val":"<h2>Problem</h2>\n<p>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</p>\n<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>\n<p>You can return the answer in any order.</p>\n<hr>\n<h4>Example 1</h4>\n<pre><code>Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].\n</code></pre>\n<h4>Example 2</h4>\n<pre><code>Input: nums = [3,2,4], target = 6\nOutput: [1,2]\n</code></pre>\n<h4>Example 3</h4>\n<pre><code>Input: nums = [3,3], target = 6\nOutput: [0,1]\n</code></pre>\n<hr>\n<h2>Solution</h2>\n<h4>Naive Approach</h4>\n<p>A naive approach would be to look at every single pair, taking <b>O(n^<sup>2</sup>)</b> time. This would be implemented as follows:</p>\n<pre><code class=\"language-Python\">class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n\n        for i in range(len(nums)):\n\n            for j in range(i+1, len(nums)):\n\n                if nums[i] + nums[j] == target: # If target found\n                    return [i,j]\n\n\n</code></pre>\n<h4>Better Approach using a Hashmap</h4>"}