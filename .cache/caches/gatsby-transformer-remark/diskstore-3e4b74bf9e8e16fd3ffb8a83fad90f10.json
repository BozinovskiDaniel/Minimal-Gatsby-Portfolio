{"expireTime":9007200884409880000,"key":"transformer-remark-markdown-ast-6e072f0560139df6f0c704d244064dd9--","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Problem","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":11,"offset":11}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":11,"offset":11}}},{"type":"paragraph","children":[{"type":"text","value":"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.","position":{"start":{"line":4,"column":1,"offset":13},"end":{"line":4,"column":122,"offset":134}}}],"position":{"start":{"line":4,"column":1,"offset":13},"end":{"line":4,"column":122,"offset":134}}},{"type":"paragraph","children":[{"type":"text","value":"You may assume that each input would have exactly one solution, and you may not use the same element twice.","position":{"start":{"line":6,"column":1,"offset":136},"end":{"line":6,"column":108,"offset":243}}}],"position":{"start":{"line":6,"column":1,"offset":136},"end":{"line":6,"column":108,"offset":243}}},{"type":"paragraph","children":[{"type":"text","value":"You can return the answer in any order.","position":{"start":{"line":8,"column":1,"offset":245},"end":{"line":8,"column":40,"offset":284}}}],"position":{"start":{"line":8,"column":1,"offset":245},"end":{"line":8,"column":40,"offset":284}}},{"type":"html","value":"<hr>","position":{"start":{"line":10,"column":1,"offset":286},"end":{"line":10,"column":5,"offset":290}}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Example 1","position":{"start":{"line":12,"column":6,"offset":297},"end":{"line":12,"column":15,"offset":306}}}],"position":{"start":{"line":12,"column":1,"offset":292},"end":{"line":12,"column":15,"offset":306}}},{"type":"code","lang":null,"meta":null,"value":"Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].","position":{"start":{"line":14,"column":1,"offset":308},"end":{"line":18,"column":4,"offset":425}}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Example 2","position":{"start":{"line":20,"column":6,"offset":432},"end":{"line":20,"column":15,"offset":441}}}],"position":{"start":{"line":20,"column":1,"offset":427},"end":{"line":20,"column":15,"offset":441}}},{"type":"code","lang":null,"meta":null,"value":"Input: nums = [3,2,4], target = 6\nOutput: [1,2]","position":{"start":{"line":22,"column":1,"offset":443},"end":{"line":25,"column":4,"offset":498}}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Example 3","position":{"start":{"line":27,"column":6,"offset":505},"end":{"line":27,"column":15,"offset":514}}}],"position":{"start":{"line":27,"column":1,"offset":500},"end":{"line":27,"column":15,"offset":514}}},{"type":"code","lang":null,"meta":null,"value":"Input: nums = [3,3], target = 6\nOutput: [0,1]","position":{"start":{"line":29,"column":1,"offset":516},"end":{"line":32,"column":4,"offset":569}}},{"type":"html","value":"<hr>","position":{"start":{"line":34,"column":1,"offset":571},"end":{"line":34,"column":5,"offset":575}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Solution","position":{"start":{"line":36,"column":4,"offset":580},"end":{"line":36,"column":12,"offset":588}}}],"position":{"start":{"line":36,"column":1,"offset":577},"end":{"line":36,"column":12,"offset":588}}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Naive Approach","position":{"start":{"line":38,"column":6,"offset":595},"end":{"line":38,"column":20,"offset":609}}}],"position":{"start":{"line":38,"column":1,"offset":590},"end":{"line":38,"column":20,"offset":609}}},{"type":"paragraph","children":[{"type":"text","value":"A naive approach would be to look at every single pair, taking ","position":{"start":{"line":40,"column":1,"offset":611},"end":{"line":40,"column":64,"offset":674}}},{"type":"html","value":"<b>","position":{"start":{"line":40,"column":64,"offset":674},"end":{"line":40,"column":67,"offset":677}}},{"type":"text","value":"O(n^","position":{"start":{"line":40,"column":67,"offset":677},"end":{"line":40,"column":71,"offset":681}}},{"type":"html","value":"<sup>","position":{"start":{"line":40,"column":71,"offset":681},"end":{"line":40,"column":76,"offset":686}}},{"type":"text","value":"2","position":{"start":{"line":40,"column":76,"offset":686},"end":{"line":40,"column":77,"offset":687}}},{"type":"html","value":"</sup>","position":{"start":{"line":40,"column":77,"offset":687},"end":{"line":40,"column":83,"offset":693}}},{"type":"text","value":")","position":{"start":{"line":40,"column":83,"offset":693},"end":{"line":40,"column":84,"offset":694}}},{"type":"html","value":"</b>","position":{"start":{"line":40,"column":84,"offset":694},"end":{"line":40,"column":88,"offset":698}}},{"type":"text","value":" time. This would be implemented as follows:","position":{"start":{"line":40,"column":88,"offset":698},"end":{"line":40,"column":132,"offset":742}}}],"position":{"start":{"line":40,"column":1,"offset":611},"end":{"line":40,"column":132,"offset":742}}},{"type":"code","lang":"Python","meta":null,"value":"class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n\n        for i in range(len(nums)):\n\n            for j in range(i+1, len(nums)):\n\n                if nums[i] + nums[j] == target: # If target found\n                    return [i,j]\n\n","position":{"start":{"line":42,"column":1,"offset":744},"end":{"line":59,"column":4,"offset":1106}}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Better Approach using a Hashmap","position":{"start":{"line":61,"column":6,"offset":1113},"end":{"line":61,"column":37,"offset":1144}}}],"position":{"start":{"line":61,"column":1,"offset":1108},"end":{"line":61,"column":37,"offset":1144}}},{"type":"paragraph","children":[{"type":"text","value":"A significantly better approach would be to utilise a hash map, by saving numbers into it and checking if the complement exists within it. This instead takes ","position":{"start":{"line":63,"column":1,"offset":1146},"end":{"line":63,"column":159,"offset":1304}}},{"type":"html","value":"<b>","position":{"start":{"line":63,"column":159,"offset":1304},"end":{"line":63,"column":162,"offset":1307}}},{"type":"text","value":"O(n)","position":{"start":{"line":63,"column":162,"offset":1307},"end":{"line":63,"column":166,"offset":1311}}},{"type":"html","value":"</b>","position":{"start":{"line":63,"column":166,"offset":1311},"end":{"line":63,"column":170,"offset":1315}}},{"type":"text","value":" time. If it does, we have found our indices. This would be implemented as follows:","position":{"start":{"line":63,"column":170,"offset":1315},"end":{"line":63,"column":253,"offset":1398}}}],"position":{"start":{"line":63,"column":1,"offset":1146},"end":{"line":63,"column":253,"offset":1398}}},{"type":"code","lang":"Python","meta":null,"value":"class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n\n        hashmap = {} # Initialise hashmap\n\n        for i in range(len(nums)): # Loop over nums\n\n            complement = target - nums[i] # Calculate complement\n\n            if complement in hashmap: # Check if complement in hashmap\n                return [hashmap[complement], i]\n\n            hashmap[nums[i]] = i","position":{"start":{"line":65,"column":1,"offset":1400},"end":{"line":84,"column":4,"offset":1895}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":85,"column":1,"offset":1896}}}}